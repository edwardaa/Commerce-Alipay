<?php

/**
 * @file
 * Implements Alipay payment services for use with Drupal Commerce.
 */

/**
 * Alipay API server.
 */
define('ALIPAY_SERVER', 'https://mapi.alipay.com/gateway.do?_input_charset=utf-8');

/**
 * Only CNY is acceptable for Alipay.
 */
define('ALIPAY_CURRENCY', 'CNY');

/**
 * UTF-8 encoding charset.
 */
define('ALIPAY_CHARSET', 'utf-8');

/**
 * Direct payment service.
 */
define('ALIPAY_SERVICE_DIRECT', 'create_direct_pay_by_user');

/**
 * Refund service.
 */
define('ALIPAY_SERVICE_REFUND', 'refund_fastpay_by_platform_pwd');

/**
 * Escrow payment service.
 */
define('ALIPAY_SERVICE_ESCROW', 'create_partner_trade_by_buyer');

/**
 * Mobile payment type.
 */
define('ALIPAY_SERVICE_MOBILE', 'mobile.securitypay.pay');

/**
 * Implements hook_menu().
 */
function commerce_alipay_menu() {
//  // Define an always accessible path to receive IPNs
//  $items['commerce_alipay/ipn'] = array(
//    'page callback' => 'commerce_alipay_process_ipn',
//    'page arguments' => array(),
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );

  $items['commerce_alipay/ipn/%commerce_alipay_method_instance'] = array(
    'page callback' => 'commerce_alipay_process_ipn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns a payment method instance array.
 *
 * @see commerce_payment_default_rules_configuration()
 * @see commerce_alipay_ipn_url()
 */
function commerce_alipay_method_instance_load($method_id) {
  $rule_name = 'commerce_payment_' . $method_id;
  $instance_id = "$method_id|$rule_name";
  return commerce_payment_method_instance_load($instance_id);
}

/**
 * Returns the IPN URL.
 *
 * @param $instance_id
 *   Optionally specify a payment method instance ID to include in the URL.
 *
 * @return string
 *   IPN url
 */
function commerce_alipay_ipn_url($instance_id) {
  // Explode the method key into its component parts.
  list($method_id, $rule_name) = explode('|', $instance_id);

  // instance_id in "method_id|rule_name" pattern is invalid for certain
  // Alipay payment methods such as Alipay Mobile, To be consistent,
  // method_id is used instead.
  return url('commerce_alipay/ipn/' . $method_id, array('absolute' => TRUE));
}

/**
 * Implements hook_commerce_alipay_trade_status_info().
 */
function commerce_alipay_commerce_alipay_trade_status_info() {
  $trade_statuses['WAIT_BUYER_PAY'] = array(
    'name' => 'WAIT_BUYER_PAY',
    'title' => t('Wait buyer pay'),
    'weight' => -10,
  );

  $trade_statuses['TRADE_PENDING'] = array(
    'name' => 'TRADE_PENDING',
    'title' => t('Trade pending'),
    'weight' => 10,
  );

  $trade_statuses['TRADE_SUCCESS'] = array(
    'name' => 'TRADE_SUCCESS',
    'title' => t('Trade success'),
    'weight' => 11,
  );

  $trade_statuses['TRADE_FINISHED'] = array(
    'name' => 'TRADE_FINISHED',
    'title' => t('Trade finished'),
    'weight' => 12,
  );
  $trade_statuses['TRADE_CLOSED'] = array(
    'name' => 'TRADE_CLOSED',
    'title' => t('Trade closed'),
    'weight' => 20,
  );

  return $trade_statuses;
}

/**
 * Processes an incoming IPN.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 * @param $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *     be pulled from the $_POST. If an IPN is passed in, validation of the IPN
 *     at Alipay will be bypassed.
 *
 * @return string
 *   'success' or 'fail' indicating whether the IPN was successfully processed or not.
 */
function commerce_alipay_process_ipn($payment_method = NULL, $debug_ipn = array()) {
  // Retrieve the IPN from $_POST if the caller did not supply an IPN array.
  // Note that Drupal has already run stripslashes() on the content of the
  // $_POST array st this point, so we don't need to worry about them.
  if (empty($debug_ipn)) {
    $ipn = $_POST;

    // Exit now if the $ipn was empty.
    if (empty($ipn)) {
      watchdog('commerce_alipay', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
      _commerce_alipay_ipn_failure();
    }

    // Attempt to verify IPN.
    if (commerce_alipay_verify_ipn($ipn, $payment_method['settings']) === FALSE) {
      watchdog('commerce_alipay', 'Invalid IPN received and ignored.', array(), WATCHDOG_ALERT);
      _commerce_alipay_ipn_failure();
    }
  }
  else {
    $ipn = $debug_ipn;
  }

  // If the payment method specifies full IPN logging, do it now
  if (!empty($payment_method['settings']['ipn_logging']) && $payment_method['settings']['ipn_logging'] == 'full_ipn' ) {
    if (!empty($ipn['trade_no'])) {
      watchdog('commerce_alipay', 'Attempting to process IPN @trade_no. !ipn_data', array( '@trade_no' => $ipn['trade_no'], '!ipn_data' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
    else {
      watchdog('commerce_alipay', 'Attempting to process an IPN. !ipn_log', array('!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
  }

  // Exit if the IPN has already been processed.
  if (!empty($ipn['trade_no']) && $prior_ipn = commerce_alipay_ipn_load($ipn['trade_no'])) {
    $prior_status = $prior_ipn['trade_status'];
    $new_status = $ipn['trade_status'];
    if ($prior_status == $new_status) {
      watchdog('commerce_alipay', 'Attempted to process an IPN that has already been processed with Trade @trade_no.', array('@trade_no' => $ipn['trade_no']), WATCHDOG_NOTICE);
      _commerce_alipay_ipn_success();
    }
    elseif (($statuses = commerce_alipay_trade_statuses()) && $statuses[$prior_status]['weight'] > $statuses[$new_status]['weight']) {
      $params = array('@trade_no' => $ipn['trade_no'], '@prior_status' => $prior_status, '@new_status' => $new_status);
      watchdog('commerce_alipay', 'Attempted to regress to an earlier trade status @new_status of an IPN with Trade @trade_no from @prior_status.', $params, WATCHDOG_NOTICE);
      _commerce_alipay_ipn_success();
    }
  }

  // Load the order based on the IPN's out trade number.
  if (!empty($ipn['out_trade_no']) && strpos($ipn['out_trade_no'], '-') !== FALSE) {
    list($ipn['order_id'], $timestamp) = explode('-', $ipn['out_trade_no']);
  }
  else {
    $ipn['order_id'] = 0;
    $timestamp = 0;
  }

  if (!empty($ipn['order_id'])) {
    $order = commerce_order_load($ipn['order_id']);
  }
  else {
    $order = FALSE;
  }

  // Give the payment method module an opportunity to validate the out trade
  // number, seller id and amount of the payment if possible. If a validate
  // function exists, it is responsible for setting its own watchdog message.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_alipay_ipn_validate';

    // If a validator function existed...
    if (function_exists($callback)) {
      // Only exit if the function explicitly returns FALSE
      if ($callback($order, $payment_method, $ipn) === FALSE) {
        _commerce_alipay_ipn_failure();
      }
    }
  }

  // Give the payment method module an opportunity to process the IPN.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_alipay_ipn_process';

    // If a processing function existed...
    if (function_exists($callback)) {
      // Skip saving if the function explicitly returns FALSE, meaning the IPN
      // wasn't actually processed.
      if ($callback($order, $payment_method, $ipn) !== FALSE) {
        // Save the processed IPN details.
        commerce_alipay_ipn_save($ipn);
      }
    }
  }

  // Invoke the hook here so implementations has access to the order and
  // payment method if available and a saved IPN array that includes the payment
  // transaction ID if created in the payment method's default process callback.
  module_invoke_all('commerce_alipay_ipn_process', $order, $payment_method, $ipn);

  _commerce_alipay_ipn_success();
}

function _commerce_alipay_ipn_failure() {
  print 'failure';
  drupal_exit();
}

function _commerce_alipay_ipn_success() {
  print 'success';
  drupal_exit();
}

/**
 * Loads a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual Alipay trade_no. Defaults to trade_no.
 *
 * @return
 *   The original IPN with some meta data related to local processing.
 */
function commerce_alipay_ipn_load($id, $type = 'trade_no') {
  return db_select('commerce_alipay_ipn', 'cai')
    ->fields('cai')
    ->condition('cai.' . $type, $id)
    // Retrieve a last IPN record with cai.ipn_id rather than cai.created,
    // since two IPNs such as WAIT_BUYER_PAY and TRADE_SUCCESS may be received
    // at same time in seconds
    ->orderBy('cai.ipn_id', 'DESC')
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the IPN.
 *
 * @return mixed
 *   The operation performed by drupal_write_record() on save; since the IPN is
 *     received by reference, it will also contain the serial numeric ipn_id
 *     used locally.
 */
function commerce_alipay_ipn_save(&$ipn) {
  if (!empty($ipn['ipn_id']) && commerce_alipay_ipn_load($ipn['trade_no'])) {
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_alipay_ipn', $ipn, 'ipn_id');
  }
  else {
    $ipn['created'] = REQUEST_TIME;
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_alipay_ipn', $ipn);
  }
}

/**
 * Deletes a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to delete
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual Alipay trade_no. Defaults to trade_no.
 */
function commerce_alipay_ipn_delete($id, $type = 'trade_no') {
  db_delete('commerce_alipay_ipn')
    ->condition($type, $id)
    ->execute();
}

/**
 * Returns a unique out trade number based on the Order ID and timestamp.
 */
function commerce_alipay_out_trade_number($order) {
  return $order->order_id . '-' . REQUEST_TIME;
}

/**
 * Submits an API request to Alipay.
 *
 * This function is currently used by Alipay Mobile Payment.
 *
 * This function may be used for any Alipay payment method that uses the same
 * settings array structure as these other payment methods and whose API
 * requests should be submitted to the same URLs.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 * @param array $nvp
 *   The set of name-value pairs describing the transaction to submit.
 * @param null $order
 *   The order the payment request is being made for.
 *
 * @return mixed
 *   The response array from Alipay if successful or FALSE on error.
 */
function commerce_alipay_api_request($payment_method, $nvp = array(), $order = NULL) {
  $url = ALIPAY_SERVER;

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'parnter' => $payment_method['settings']['partner'],
    'rsa_private' => $payment_method['settings']['rsa_private'],
    'rsa_public' => $payment_method['settings']['rsa_public'],
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_alipay_api_request', $nvp, $order, $payment_method);

  if ($payment_method['settings']['log']['request'] == 'request') {
    $log_nvp = $nvp;
    watchdog('commerce_alipay', 'Alipay API request to @url: !param', array( '@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);

  // Commerce Alipay requires SSL peer verification, which may prevent out of
  // date servers from successfully processing API requests. If you get an error
  // related to peer verification, you may need to download the CA certificate
  // bundle file from http://curl.haxx.se/docs/caextract.html, place it in a
  // safe location on your web server, and update your settings.php to set the
  // commerce_alipay_cacert variable to contain the absolute path of the file.
  // Alternately, you may be able to update your php.ini to point to the file
  // with the curl.cainfo setting.
  if (variable_get('commerce_alipay_cacert', FALSE)) {
    curl_setopt($ch, CURLOPT_CAINFO, variable_get('commerce_alipay_cacert', ''));
  }

  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_alipay', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array.
  $response = array();

  foreach (explode('&', $result) as $nvp) {
    list($key, $value) = explode('=', $nvp);
    $response[urlencode($key)] = urlencode($value);
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_alipay', 'Alipay server response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  return $response;
}

/**
 * Returns an array of all the trade statuses keyed by name.
 *
 * @return
 *   The array of trade statuses, keyed by status name.
 */
function commerce_alipay_trade_statuses() {
  // First check the static cache for an trade statues array
  $trade_statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (!isset($trade_statuses)) {
    $trade_statuses = module_invoke_all('commerce_alipay_trade_status_info');

    // Give other modules a change to alter the trade statuses.
    drupal_alter('commerce_alipay_trade_status_info', $trade_statuses);

    uasort($trade_statuses, 'drupal_sort_weight');
  }

  return $trade_statuses;
}

/**
 * Formats a price amount into a decimals value as expected by Alipay.
 *
 * @param $amount
 *   The integer price amount.
 * @param $currency_code
 *   The currency code of the price.
 *
 * @return float
 *   The decimal price amount as excepted by Alipay API servers.
 */
function commerce_alipay_price_amount($amount, $currency_code) {
  return number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', '');
}

/**
 * Signs given data array using specified settings.
 *
 * @param $data
 *   The data array to be signed.
 * @param $settings
 *   The Alipay settings containing sign_type and partner_key.
 * @param $double_quotes
 *   TRUE or FALSE indicating whether or not to surround data value with double
 *   quotes. If missing or NULL, the value configured in 'Payment settings'
 *   is used.
 *
 * @return array
 *   The signed data including sign and sign_type.
 */
function commerce_alipay_sign(array $data, $settings, $double_quotes = NULL) {
  if (!isset($double_quotes) && isset($settings['double_quotes'])) {
    $double_quotes = $settings['double_quotes'];
  }

  $data_str = _commerce_alipay_process_data($data, $double_quotes);

  $sign_type = $settings['sign_type'];
  $sign = '';

  if ($sign_type == 'MD5') {
    $sign = md5($data_str . $settings['md5_key']);
  }
  else if ($sign_type == 'RSA') {
    $priv_key_id = openssl_get_privatekey('file://' . $settings['rsa_private']);
    openssl_sign($data_str, $sign_result, $priv_key_id);
    openssl_free_key($priv_key_id);
    $sign = drupal_base64_encode($sign_result);
  }

  if ($double_quotes) {
    // Surround with double quotes.
    $data['sign'] = '"' . $sign . '"';
    $data['sign_type'] = '"' . $sign_type . '"';
  }
  else {
    $data['sign'] = $sign;
    $data['sign_type'] = $sign_type;
  }

  return $data;
}

/**
 * Verifies IPN based on sign, notify_id and other parameters.
 *
 * @return boolean
 *   TRUE of FALSE indicating whether the IPN was sent by Alipay server or not.
 */
function commerce_alipay_verify_ipn($ipn, $settings) {
  // Verify signature
  if (commerce_alipay_verify_sign($ipn, $settings) === FALSE) {
    watchdog('commerce_alipay', 'IPN verification failed failed with non-matching sign.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  if (empty($ipn['notify_id'])) {
    watchdog('commerce_alipay', 'IPN verification failed with empty notify_id.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // Verify notify_id
  return commerce_alipay_verify_notify($ipn['notify_id'], $settings);
}

/**
 * Verifies signature returned from Alipay.
 *
 * @param $data
 *   Returned data from Alipay
 * @param $settings
 *   Payment settings
 *
 * @return bool
 *   TRUE or FALSE indicating whether or not the returned signature is
 *   matching with our signature.
 */
function commerce_alipay_verify_sign(array $data, $settings) {
  if ($settings['sign_type'] == 'MD5') {
    $prior_sign = $data['sign'];
    // For verification the $double_quotes is always FALSE
    $signed_data = commerce_alipay_sign($data, $settings, FALSE);

    return $signed_data['sign'] == $prior_sign;
  }

  if ($settings['sign_type'] == 'RSA') {
    $prior_sign = $data['sign'];
    // For verification the $double_quotes is always FALSE
    $data_str = _commerce_alipay_process_data($data, FALSE);

    $pub_key_id = openssl_get_publickey('file://' . $settings['rsa_public']);
    $result = openssl_verify($data_str, base64_decode($prior_sign), $pub_key_id);
    openssl_free_key($pub_key_id);

    // 1  - successful
    // 0  - failed
    // -1 - error
    return $result === 1;
  }

  // unrecognized sign type
  return FALSE;
}

/**
 * Verify notify_id to ensure it is returned from Alipay rather than elsewhere.
 *
 * @param $notify_id
 *   Notification id
 * @param $settings
 *   Payment settings
 * @return bool
 *   TRUE or FALSE
 */
function commerce_alipay_verify_notify($notify_id, $settings) {
  $url = ALIPAY_SERVER . "&service=notify_verify&partner={$settings['partner']}&notify_id={$notify_id}";
  $response = drupal_http_request($url);

  if (!empty($settings['ipn_logging']) && $settings['ipn_logging'] == 'full_ipn') {
    watchdog('commerce_alipay', 'Verify notify_id with the following response :!response', array('!response' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
  }

  // If an error occurred during processing, log the message and exit.
  if (property_exists($response, 'error')) {
    watchdog('commerce_alipay', 'Attempt to validate IPN failed with error @code: @error', array( '@code' => $response->code, '@error' => $response->error), WATCHDOG_ERROR);
    return FALSE;
  }

  return $response->data === 'true';
}

/**
 * Processes a data array and returns its string for request.
 */
function _commerce_alipay_process_data(&$data, $double_quotes) {
  // Strip sign/sign_type
  unset($data['sign'], $data['sign_type']);
  // Strip empty items
  foreach ($data as $key => $value) {
    if ($value == '') {
      unset($data[$key]);
    }
  }

  // Sort by keys
  ksort($data);

  $params = array();
  foreach ($data as $key => &$value) {
    if ($double_quotes) {
      // Surround with double quotes.
      $value = '"' . $value . '"';
    }
    $params[] = $key . '=' . $value;
  }

  return implode('&', $params);
}